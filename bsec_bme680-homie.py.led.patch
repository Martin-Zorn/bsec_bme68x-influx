--- bsec_bme680-homie.py.org	2021-11-11 16:04:14.398725769 +0100
+++ bsec_bme680-homie.py	2021-11-12 08:42:33.625234439 +0100
@@ -20,9 +21,55 @@ retain_message = True
 mqttretry = 5
 # how many values should be collected before publishing the median
 medianvalues = 10
+# True/False led warning (only True if you have an RGB Led connected) 
+ledwarning = False
+# set red,green and blue pins
+redPin = 22
+greenPin = 27
+bluePin = 17
+# At which value CO2 alarm will be fired (x in ppm)
+eco2alarm = 1000
+# At which value humidity alarm will be fired (x in %)
+humidityalarm = 70
 
 # do the stuff
+if ledwarning == True:
+  import RPi.GPIO as GPIO
+  # disable warnings (optional)
+  GPIO.setwarnings(False)
+  # Select GPIO Mode
+  GPIO.setmode(GPIO.BCM)
+  # set pins as outputs
+  GPIO.setup(redPin,GPIO.OUT)
+  GPIO.setup(greenPin,GPIO.OUT)
+  GPIO.setup(bluePin,GPIO.OUT)
+
 ### Functions
+def turnOffled():
+  GPIO.output(redPin,GPIO.LOW)
+  GPIO.output(greenPin,GPIO.LOW)
+  GPIO.output(bluePin,GPIO.LOW)
+
+def whiteled():
+  GPIO.output(redPin,GPIO.HIGH)
+  GPIO.output(greenPin,GPIO.HIGH)
+  GPIO.output(bluePin,GPIO.HIGH)
+
+def blueled():
+  GPIO.output(redPin,GPIO.LOW)
+  GPIO.output(greenPin,GPIO.LOW)
+  GPIO.output(bluePin,GPIO.HIGH)
+
+def redled():
+  GPIO.output(redPin,GPIO.HIGH)
+  GPIO.output(greenPin,GPIO.LOW)
+  GPIO.output(bluePin,GPIO.LOW)
+
+def greenled():
+  GPIO.output(redPin,GPIO.LOW)
+  GPIO.output(greenPin,GPIO.HIGH)
+  GPIO.output(bluePin,GPIO.LOW)
+
 def publish(topic, payload):
   client.publish("homie/" + clientid + "/" + topic,payload,qos,retain_message)
 
@@ -35,7 +82,7 @@ def on_connect(client, userdata, flags,
   publish("$nodes",nodes)
   # homie node config
   publish(nodes + "/$name","BME680 Sensor")
-  publish(nodes + "/$properties","temperature,humidity,gas,pressure,iaqaccuracy,iaq,staticiaq,eco2,bvoce,sensorstate")
+  publish(nodes + "/$properties","temperature,humidity,gas,pressure,iaqaccuracy,iaq,staticiaq,eco2,bvoce,sensorstate,eco2alarm,humidityalarm")
   publish(nodes + "/temperature/$name","Temperature")
   publish(nodes + "/temperature/$unit","Â°C")
   publish(nodes + "/temperature/$datatype","float")
@@ -44,6 +91,9 @@ def on_connect(client, userdata, flags,
   publish(nodes + "/humidity/$unit","%")
   publish(nodes + "/humidity/$datatype","float")
   publish(nodes + "/humidity/$settable","false")
+  publish(nodes + "/humidityalarm/$name","Humidity Alarm")
+  publish(nodes + "/humidityalarm/$datatype","boolean")
+  publish(nodes + "/humidityalarm/$settable","false")
   publish(nodes + "/gas/$name","Gas")
   publish(nodes + "/gas/$unit","ohm")
   publish(nodes + "/gas/$datatype","integer")
@@ -65,6 +115,9 @@ def on_connect(client, userdata, flags,
   publish(nodes + "/eco2/$unit","ppm")
   publish(nodes + "/eco2/$datatype","float")
   publish(nodes + "/eco2/$settable","false")
+  publish(nodes + "/eco2alarm/$name","CO2 Alarm")
+  publish(nodes + "/eco2alarm/$datatype","boolean")
+  publish(nodes + "/eco2alarm/$settable","false")
   publish(nodes + "/bvoce/$name","Breath VOC equivalent")
   publish(nodes + "/bvoce/$unit","ppm")
   publish(nodes + "/bvoce/$datatype","float")
@@ -77,6 +130,8 @@ def on_disconnect(client, userdata, rc):
   print("MQTT Connection disconnected, Returned code=",rc)
 
 # running the Script
+if ledwarning == True:
+  whiteled()
 #MQTT Connection
 mqttattempts = 0
 while mqttattempts < mqttretry:
@@ -153,6 +208,26 @@ try:
       publish(nodes + "/eco2","{:.15f}".format(median(listeCO2)))
       publish(nodes + "/bvoce","{:.25f}".format(median(listbVOCe)))
       publish(nodes + "/sensorstate","{:.0f}".format(median(listStatus)))
+      if median(listeCO2) >= eco2alarm and median(listHumidity) >= humidityalarm:
+        publish(nodes + "/eco2alarm","true")
+        publish(nodes + "/humidityalarm","true")
+        if ledwarning == True:
+          redled()
+      if median(listeCO2) >= eco2alarm and median(listHumidity) <= humidityalarm:
+        publish(nodes + "/eco2alarm","true")
+        publish(nodes + "/humidityalarm","false")
+        if ledwarning == True:
+          redled()
+      if median(listeCO2) <= eco2alarm and median(listHumidity) >= humidityalarm:
+        publish(nodes + "/eco2alarm","false")
+        publish(nodes + "/humidityalarm","true")
+        if ledwarning == True:
+          blueled()
+      if median(listeCO2) <= eco2alarm and median(listHumidity) <= humidityalarm:
+        publish(nodes + "/eco2alarm","false") 
+        publish(nodes + "/humidityalarm","false") 
+        if ledwarning == True:
+          greenled()
       # homie state ready
       publish("$state","ready")
 
@@ -170,6 +245,8 @@ try:
 
 except KeyboardInterrupt:
   print("Goodbye!")
+  if ledwarning == True:
+    turnOffled()
   # At least close MQTT Connection
   publish("$state","disconnected")
   time.sleep(1)
@@ -181,5 +258,7 @@ except KeyboardInterrupt:
 print("Script stopped")
 publish("$state","disconnected")
 time.sleep(1)
+if ledwarning == True:
+  turnOffled()
 client.disconnect()
 client.loop_stop()
